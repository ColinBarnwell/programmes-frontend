parameters:
    app.default_locale: 'en_GB'
    app.orbit_client.class: BBC\BrandingClient\OrbitClient
    app.orbit_client.env: 'test'
    app.branding_client.class: BBC\BrandingClient\BrandingClient
    app.branding_client.env: 'test'

services:

    _defaults:
        autoconfigure: true
        autowire: true
        public: false

    cache.null_provider:
        class: Symfony\Component\Cache\Adapter\NullAdapter

    # we need an instance of RedisCluster, default Redis class doesn't support cluster mode.
    # RedisCluster class support most Redis operations
    cache.default_redis_provider:
        class: RedisCluster
        arguments:
            - ~
            - ['%redis_endpoint%']
        calls:
        # By default, RedisCluster will only send commands to master nodes, this option distribute readonly commands between masters and slaves
        # RedisCluster::OPT_SLAVE_FAILOVER  = 5
        # RedisCluster::FAILOVER_DISTRIBUTE = 2
            - { method: 'setOption', arguments: [5, 2] }

    App\:
        resource: '../../src/{Command,EventSubscriber,Twig}'

    App\Controller\:
        resource: '../../src/Controller'
        public: true # Mandatory

    # TODO: Remve me once these type aliases are defined in DoctrineBundle
    # (They're already in master, we're just waiting on a new release > 1.6.7)
    Doctrine\DBAL\Driver\Connection: { alias: database_connection }
    Doctrine\ORM\EntityManagerInterface: { alias: doctrine.orm.entity_manager }

    ### Begin the services!

    # This needs to be triggered before the any existing default Resolvers,
    # the largest of which has a priority of 100
    App\ArgumentResolver\IdentifierValueResolver:
        tags: [{name: 'controller.argument_value_resolver', priority: 125 }]

    # TODO: Work out how to pass through a SymfonyCache object wrapped in a
    # DoctrineProvider. So that we can see caching information in the profiler
    # panel that shall land in Symfony 3.3
    app.orbit_client:
        public: true
        class: '%app.orbit_client.class%'
        arguments:
            - '@csa_guzzle.client.default'
            - '@cache.app_page_chrome'
            - { env: '%app.orbit_client.env%', mustache: { cache: '%kernel.cache_dir%/mustache' } }

    # TODO: Work out how to pass through a SymfonyCache object wrapped in a
    # DoctrineProvider. So that we can see caching information in the profiler
    # panel that shall land in Symfony 3.3
    app.branding_client:
        public: true
        class: '%app.branding_client.class%'
        arguments:
            - '@csa_guzzle.client.default'
            - '@cache.app_page_chrome'
            - { env: '%app.branding_client.env%' }


    ### Translations

    app.translate_factory:
        public: true
        class: RMP\Translate\TranslateFactory
        arguments:
            - fallback_locale: 'en_GB'
              cachepath: '%kernel.cache_dir%/translations'
              domains: ['programmes']
              default_domain: 'programmes'
              debug: '%kernel.debug%'
              basepath: '%kernel.project_dir%/app/Resources/translations'

    RMP\Translate\Translate:
        autowire: false
        factory: ['@app.translate_factory', 'create']
        arguments: ['%app.default_locale%']

    ### Front end factories

    App\Ds2013\PresenterFactory: ~

    ## Twig Extension

    # This needs to be public as we may end up injecting a new Translate
    # instance into it, if the programme options say the language should be one
    # other than the default
    App\Twig\DesignSystemPresenterExtension:
        public: true

    ### Monitoring

    App\EventSubscriber\MonitoringSubscriber:
        tags:
            - { name: 'kernel.event_subscriber' }
            - { name: 'monolog.logger', channel: 'app_access' }


    ### Programmes Service
    BBC\ProgrammesPagesService\Mapper\ProgrammesDbToDomain\MapperFactory: ~

    BBC\ProgrammesPagesService\Cache\Cache:
        arguments: [ '@cache.programmes', 'frontend.%cosmos_component_release%']

    BBC\ProgrammesPagesService\Service\ServiceFactory: ~

    BBC\ProgrammesPagesService\Service\BroadcastsService:
            autowire: false
            factory: [ '@BBC\ProgrammesPagesService\Service\ServiceFactory', 'getBroadcastsService']

    BBC\ProgrammesPagesService\Service\NetworksService:
        autowire: false
        factory: [ '@BBC\ProgrammesPagesService\Service\ServiceFactory', 'getNetworksService']

    BBC\ProgrammesPagesService\Service\ProgrammesService:
        autowire: false
        factory: [ '@BBC\ProgrammesPagesService\Service\ServiceFactory', 'getProgrammesService']

    BBC\ProgrammesPagesService\Service\ServicesService:
        autowire: false
        factory: [ '@BBC\ProgrammesPagesService\Service\ServiceFactory', 'getServicesService']
