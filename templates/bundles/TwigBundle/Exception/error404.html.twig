{% extends '@Twig/Exception/error.html.twig' %}

{% block title %}{{ tr('page_not_found_title') }}{% endblock %}

{% block image %}{{ asset('images/error/clanger_error.gif') }}{% endblock %}
{% block pagenote %}{{ tr('page_not_found_note') }}{% endblock %}

{% block javascripts %}
    <script>
        document.getElementsByClassName('grid')[1].children[0].addEventListener('click', () => {
            require(['pixi'], PIXI => {
                const app = new PIXI.Application({
                    width: window.innerWidth,
                    height: window.innerHeight,
                    backgroundColor: 0x000000,
                    resolution: window.devicePixelRatio || 1,
                    autoResize: true
                });

                const view = app.view;
                const element = document.getElementsByClassName('programmes-page')[0];
                element.parentElement.replaceChild(view, element);
                view.scrollIntoView(true);

                const container = new PIXI.Container();
                app.stage.addChild(container);

                const screenWidth = app.screen.width;

                const moonRadius = screenWidth * 3;
                container.addChild(new PIXI.Graphics()
                    .beginFill(0xFFFFFF)
                    .drawCircle(moonRadius, moonRadius, moonRadius)
                    .endFill()
                    .beginFill(0xFF0000)
                    .drawStar(moonRadius, moonRadius, 100, moonRadius)
                    .endFill());

                container.x = screenWidth / 2;
                container.y = (app.screen.height * 0.75) + moonRadius;

                container.pivot.x = moonRadius;
                container.pivot.y = moonRadius;

                const ticker = app.ticker;

                const generateObstacle = () => {
                    const min = 1000;
                    window.setTimeout(() => {
                        const rotation = container.rotation;
                        const obstacleRadius = moonRadius / 100;
                        const offsetRadius = moonRadius + (obstacleRadius * 2);
                        container.addChild(new PIXI.Graphics()
                            .beginFill(0x0000FF)
                            .drawCircle(
                                moonRadius + (Math.cos(-rotation) * offsetRadius),
                                moonRadius + (Math.sin(-rotation) * offsetRadius),
                                obstacleRadius
                            )
                            .endFill());

                        ticker.addOnce(generateObstacle);
                    }, Math.floor(Math.random() * (5000 - min + 1)) + min);
                };

                let speed = 0.002;
                ticker.add(delta => {
                    container.rotation -= speed * delta;
                    speed += 0.000001;
                });

                ticker.addOnce(generateObstacle);
            });
        }, { once: true });
    </script>
{% endblock %}
