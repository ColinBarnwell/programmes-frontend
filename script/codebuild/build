#!/bin/sh

# Prints shell input lines as they are read.
# set -v

# Exit immediately if a command exits with a non-zero status
set -e

###########
# INSTALL #
###########

# Fail if we're not using php71+
if ! (php --version | grep -q "PHP 7.") ; then
    echo "You're not using PHP 7.1+, please install it."
    php --version
    exit 1
fi

# copy the certificate from aws parameter store so we can use cosmos-release inside CodeBuild
# this is a temporal solution until we have an official way to provide CodeBuild with certs
echo $BBC_CERTIFICATE | base64 --decode > /etc/pki/tls/certs/client.crt
echo $BBC_CERTIFICATE_KEY | base64 --decode > /etc/pki/tls/private/client.key
echo $COSMOS_REQUIRED_CA | base64 --decode >> /etc/pki/tls/certs/ca-bundle.crt

echo "Validating Cosmos dials..."
cosmos-release check-dials

composer config -g github-oauth.github.com $OAUTH
# composer with dev dependencies
composer --no-ansi --no-interaction install

npm install

# Compile static assets
npm run gulp-ci

bin/phpunit --no-coverage
vendor/bin/phpcs -n
npm run lint
vendor/bin/phpstan analyse -c phpstan.neon src tests --level=4 --memory-limit=256M

# install composer for production
export SYMFONY_ENV=prod;
export APP_ENV=prod;
composer --no-ansi --no-interaction --no-dev --optimize-autoloader --prefer-dist install

# Some directories are not required in the RPM so we can empty them
rm -rf var/* docs/* tests/*

#########
# BUILD #
#########

# Get the next release version from cosmos API.
version=`cosmos-release generate-version programmes-frontend`

# Build the RPM
mbt -r 7 -s rpmbuild -v ${version}

##############
# POST BUILD #
##############

echo "Publishing assets..."
aws s3 sync web/assets s3://$STATIC_ASSETS_BUCKET/programmes-frontend --cache-control "public, max-age=31622400, immutable"

echo 'COSMOS-RELEASE: Sending RPM to cosmos.....'
cosmos-release service programmes-frontend RPMS/*.rpm --release-version v

exit 0
